# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: centaurus-dashboard

---

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: iam-storage-class
provisioner: centaurus.io/host-path
volumeBindingMode: WaitForFirstConsumer

---

kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  namespace: centaurus-dashboard
  labels:
    type: local
    app: postgres
spec:
  storageClassName: iam-storage-class
  capacity:
    storage: 25Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/var/lib/data"

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  namespace: centaurus-dashboard
  labels:
    app: postgres
spec:
  storageClassName: iam-storage-class
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 25Gi

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: centaurus-dashboard
  labels:
    app: postgres
data:
  Postgres_DB: postgres
  DB_Host: postgres-service
  DB_Port: "5432"

---

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: centaurus-dashboard
data:
  DB_User: cG9zdGdyZXM=
  DB_User_Password: c29tZVBhc3N3b3Jk
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: centaurus-dashboard
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres-centaurus-iam
          image: postgres:latest
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: Postgres_DB
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: DB_Host
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: DB_Port
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: DB_User
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: DB_User_Password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: centaurus-dashboard
  labels:
    app: postgres
spec:
  type: LoadBalancer
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
  selector:
    app: postgres

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard
  namespace: centaurus-dashboard

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard
  namespace: centaurus-dashboard
spec:
  type: NodePort
  ports:
    - port: 443
      targetPort: 8443
      nodePort: 30001
  selector:
    k8s-app: centaurus-dashboard

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard-certs
  namespace: centaurus-dashboard
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard-csrf
  namespace: centaurus-dashboard
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard-key-holder
  namespace: centaurus-dashboard
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard-settings
  namespace: centaurus-dashboard

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard
  namespace: centaurus-dashboard
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["centaurus-dashboard-key-holder", "centaurus-dashboard-certs", "centaurus-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'centaurus-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["centaurus-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard
  namespace: centaurus-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: centaurus-dashboard
subjects:
  - kind: ServiceAccount
    name: centaurus-dashboard
    namespace: centaurus-dashboard

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: centaurus-dashboard
  namespace: centaurus-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: centaurus-dashboard
subjects:
  - kind: ServiceAccount
    name: centaurus-dashboard
    namespace: centaurus-dashboard

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: centaurus-dashboard
  name: centaurus-dashboard
  namespace: centaurus-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: centaurus-dashboard
  template:
    metadata:
      labels:
        k8s-app: centaurus-dashboard
    spec:
      containers:
        - name: centaurus-dashboard
          image: c2cengg20190034/dashboard:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: Postgres_DB
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: DB_Host
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: DB_Port
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: DB_User
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: DB_User_Password
            - name: KUBECONFIG_DIR
              value: /var/run/centaurus-configs
          args:
            - --auto-generate-certificates
            - --enable-skip-login
            - --disable-settings-authorizer
            - --kubeconfig=/var/run/centaurus-configs/kubeconfig-proxy
            - --enable-insecure-login
            - --insecure-bind-address=0.0.0.0
            - --namespace=centaurus-dashboard
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          volumeMounts:
            - name: centaurus-dashboard-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /var/run/centaurus-configs
              name: centaurus-configs
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: centaurus-dashboard-certs
          secret:
            secretName: centaurus-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
        - name: centaurus-configs
          hostPath:
            path: /home/coreos/centaurus-configs
      serviceAccountName: centaurus-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.centaurus.io/master
          effect: NoSchedule

---

kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: centaurus-dashboard
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: dashboard-metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: centaurus-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
    spec:
      containers:
        - name: dashboard-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.1
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
      serviceAccountName: centaurus-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.centaurus.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}
